const axios = require('axios');
const axiosRetry = require('axios-retry');
const http = require('http');
const https = require('https');
const { patchAxiosInstance } = require('@byteinspire/utils');
const dlog = require('debug')('inspirecloud.api');

const version = require('../package.json').version;

const agentOptions = {
    keepAlive: true,
    maxFreeSockets: 10,
};

const httpAgent = new http.Agent(agentOptions);
const httpsAgent = new https.Agent(agentOptions);

class InspireCloudAPI {
    constructor(initOptions = {}) {
        this._env = Object.assign({}, process.env);
        this._options = initOptions;
        this._optionsChecked = false;
    }

    get db() {
        if (this._db) {
            return this._db;
        }
        this._checkOptions();
        this._db = this._createResourceClient('db');
        return this._db;
    }

    get file() {
        if (this._file) {
            return this._file;
        }
        this._checkOptions();
        this._file = this._createResourceClient('file');
        return this._file;
    }

    get fileStorage() {
        if (this._fileStorage) {
            return this._fileStorage;
        }
        this._checkOptions();
        this._fileStorage = this._createResourceClient('fileStorage');
        return this._fileStorage;
    }

    get redis() {
        if (this._redis) {
            return this._redis;
        }
        this._checkOptions();
        this._redis = this._createResourceClient('redis');
        return this._redis;
    }

    get user() {
        if (this._user) {
            return this._user;
        }
        this._checkOptions();
        this._user = this._createResourceClient('user');
        return this._user;
    }

    get platform() {
        if (this._platform) {
            return this._platform;
        }
        this._checkOptions();
        const { serviceId, axiosInstance, Platform } = this._createResourceClient('platform');
        this._platform = new Platform(serviceId, axiosInstance, { user: this.user });
        return this._platform;
    }

    get middleware() {
        if (this._middleware) {
            return this._middleware;
        }
        this._checkOptions();
        const middleware = this._createResourceClient('middleware');
        this._middleware = middleware.getMiddleware();
        return this._middleware;
    }

    _checkOptions() {
        if (this._optionsChecked) {
            return;
        }

        this.serviceId = this._options.serviceId || this._env.INSPIRECLOUD_SERVICE_ID;
        this.serviceSecret = this._options.serviceSecret || this._env.INSPIRECLOUD_SERVICE_SECRET;
        this.endpoint = this._options.endpoint || this._env.INSPIRECLOUD_API_ENDPOINT;

        if (!this.serviceId) {
            throw new Error('InspireCloud: Service ID is not specified, please set env `INSPIRECLOUD_SERVICE_ID`');
        }

        if (!this.serviceSecret) {
            throw new Error(
                'InspireCloud: Service Secret is not specified, please set env `INSPIRECLOUD_SERVICE_SECRET`',
            );
        }

        if (!this.endpoint) {
            throw new Error('InspireCloud: Endpoint is not specified, please set env `INSPIRECLOUD_API_ENDPOINT`');
        }

        this._optionsChecked = true;
    }

    _getResource(name, optionalEndpoint) {
        dlog(`get resource ${name}`);

        let factory = null;
        let version = null;
        let endpoint = null;
        switch (name) {
            case 'db':
                factory = require('@byteinspire/db').createDbSDK;
                version = require('@byteinspire/db/package.json').version;
                endpoint = this.endpoint ? `${this.endpoint}/db` : optionalEndpoint;
                break;
            case 'redis':
                factory = require('@byteinspire/redis').createRedisSDK;
                version = require('@byteinspire/redis/package.json').version;
                endpoint = this.endpoint ? `${this.endpoint}/redis` : optionalEndpoint;
                break;
            case 'file':
                factory = require('@byteinspire/file').createFileSDK;
                version = require('@byteinspire/file/package.json').version;
                endpoint = this.endpoint ? `${this.endpoint}/fileStorage` : optionalEndpoint;
                break;
            case 'fileStorage':
                factory = require('@byteinspire/file').createCompatibleFileSDK;
                version = require('@byteinspire/file/package.json').version;
                endpoint = this.endpoint ? `${this.endpoint}/fileStorage` : optionalEndpoint;
                break;
            case 'user':
                factory = require('@byteinspire/user').createUserSDK;
                version = require('@byteinspire/user/package.json').version;
                endpoint = this.endpoint ? `${this.endpoint}/user` : optionalEndpoint;
                break;
            case 'platform':
                factory = require('@byteinspire/platform').createPlatformSDK;
                version = require('@byteinspire/platform/package.json').version;
                endpoint = this.endpoint ? `${this.endpoint}/platform` : optionalEndpoint;
                break;
            case 'middleware':
                factory = require('@byteinspire/middleware').createMiddlewareSDK;
                version = require('@byteinspire/middleware/package.json').version;
                endpoint = this.endpoint ? `${this.endpoint}/middleware` : optionalEndpoint;
                break;
            default:
                throw new Error(`unknown resource ${name}`);
        }

        return {
            factory,
            version,
            endpoint,
        };
    }

    _createResourceClient(name, optionalEndpoint) {
        const res = this._getResource(name, optionalEndpoint);
        const axiosInstance = axios.create({
            baseURL: res.endpoint,
            headers: {
                'x-inspirecloud-version': version,
                [`x-inspirecloud-${name}-version`]: res.version,
            },
            maxContentLength: -1,
            maxBodyLength: -1,
            timeout: 30 * 1e3,
            maxRedirects: 0,
            httpAgent: httpAgent,
            httpsAgent: httpsAgent,
        });

        axiosRetry(axiosInstance, {
            retries: 3,
            retryCondition: axiosRetry.isNetworkError,
        });

        patchAxiosInstance(axiosInstance, this.serviceId, this.serviceSecret);

        return res.factory(this.serviceId, axiosInstance);
    }
}

module.exports = new InspireCloudAPI();
module.exports.Larkcloud = InspireCloudAPI;
module.exports.Inspirecloud = InspireCloudAPI;
module.exports.default = module.exports;
