const { trap } = require('@byteinspire/utils');
const whiteList = require('./whitelist');

const serviceIdKey = 'X-Light-Service-Id';
const requestTimeout = 20 * 1e3;

class RedisSDK {
    constructor(serviceId, axiosInstance) {
        axiosInstance.defaults.headers = {
            [serviceIdKey]: serviceId,
        };
        axiosInstance.defaults.timeout = requestTimeout;

        this.axios = axiosInstance;
    }

    async post(command, data, axiosConfig) {
        const res = await this.axios.post(`/api/v1/command${command}`, data, axiosConfig);
        return res.data;
    }
}

function genErrorStr(message, moduleName) {
    const modulePrefix = moduleName ? `[${moduleName}] ` : '';
    return `${modulePrefix}${message}`;
}

function generateErrorMessageFor(method) {
    return (error) => {
        const message = error.response && error.response.data ? error.response.data.message : error.message;
        return genErrorStr(message, `inspirecloud.redis.${method}`);
    };
}

whiteList.forEach((command) => {
    const name = command.toLowerCase();
    const fn = async function (...args) {
        const res = await this.post(`/${name}`, {
            args,
        });
        return res.result;
    };
    Object.defineProperty(fn, 'name', { value: name });
    RedisSDK.prototype[name] = trap(fn, false, generateErrorMessageFor(name));
    RedisSDK.prototype[command] = RedisSDK.prototype[name];
});

module.exports = {
    RedisSDK,
};
