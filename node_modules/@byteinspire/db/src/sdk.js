const Table = require('./Table');
const { trap } = require('@byteinspire/utils');
const Database = require('./Database');
const ObjectId = require('bson').ObjectId;
const valid = require('./helpers/valid');
const db = require('./db');

class DbSDK {
    constructor(serviceId, axiosInstance) {
        this.tables = {};
        this.serviceId = serviceId;
        this.database = new Database(serviceId, axiosInstance);
    }

    async hasTable(tableName) {
        // noinspection all
        let ret = await this._send({
            op: 'listCollections',
        });
        return !!ret.includes(tableName);
    }

    async deleteTable(tableName) {
        // noinspection all
        let ret = await this._send({
            op: 'dropCollection',
            collection: tableName,
        });
        if (ret.droppedCount === 0) {
            throw new Error(`table ${tableName} does not exist`);
        }
    }

    async _send(instruction) {
        let newInstruction = Object.assign(
            {
                serviceId: this.serviceId,
            },
            instruction,
        );
        return this.database.send(newInstruction);
    }

    table(tableName, serviceId = this.serviceId) {
        valid('str!', tableName);

        let s = serviceId + '_' + tableName;
        this.tables[s] = this.tables[s] || new Table(tableName, serviceId, this);
        return this.tables[s];
    }
}

Object.setPrototypeOf(DbSDK.prototype, db);

DbSDK.prototype.ObjectId = ObjectId;
const toDecorate = ['deleteTable', 'hasTable'];

toDecorate.map((operationName) => {
    const descriptor = Object.getOwnPropertyDescriptor(DbSDK.prototype, operationName);
    if (descriptor) {
        descriptor.value = trap(
            descriptor.value,
            false,
            (error) => `[inspirecloud.db.${operationName}]: ${error.message}`,
        );
        Object.defineProperty(DbSDK.prototype, operationName, descriptor);
    }
});
module.exports = {
    DbSDK,
};
