const s = require('./symbols');
const observe = require('./helpers/observe');

function ODMObject(obj, { table, isNew } = {}) {
    obj[s.table] = table;
    obj[s.updates] = {};
    obj[s.isNew] = isNew;
    obj[s.populatePaths] = {};
    obj[s.saving] = false;

    Object.defineProperties(obj, {
        [s.table]: {
            enumerable: false,
        },
        [s.updates]: {
            enumerable: false,
        },
        [s.isNew]: {
            enumerable: false,
        },
        [s.populatePaths]: {
            enumerable: false,
        },
        [s.saving]: {
            enumerable: false,
        },
    });
    return observe(obj, onChange);

    function onChange(change) {
        if (obj[s.isNew]) return;
        let updates = obj[s.updates];
        let key;
        // noinspection all
        while (true) {
            key = change.key;
            if (updates.hasOwnProperty(key) && updates[key] !== undefined) {
                if (updates[key].hasOwnProperty(s.data)) {
                    if (change.change.key === undefined) {
                        updates[key][s.data] = change.change.data;
                    }
                    return;
                }
            } else {
                updates[key] = {};
            }

            change = change.change;
            if (change.key === undefined || change.type !== 'object') {
                break;
            }
            updates = updates[key];
        }
        updates[key] = { [s.data]: change.data };
    }
}

ODMObject.origin = function (odm) {
    return observe.origin(odm);
};
ODMObject.genUpdateField = function (odm) {
    let updates = odm[s.updates];
    let stack = [];
    let result = {};
    stack.push({ path: null, obj: updates });
    while (stack.length > 0) {
        let { path, obj } = stack.pop();

        if (obj.hasOwnProperty(s.data)) {
            if (obj[s.data] === undefined) {
                result.$unset = result.$unset || {};
                result.$unset[path] = 1;
            } else {
                result.$set = result.$set || {};
                result.$set[path] = obj[s.data];
            }
            continue;
        }

        // 已被 populate 的 path, 自身修改计入, 但内部修改不计入
        if (odm[s.populatePaths][path]) {
            continue;
        }

        let keys = Object.keys(obj);
        if (keys.length > 0) {
            for (let key of keys) {
                let newPath = path === null ? key : path + '.' + key;
                stack.push({ path: newPath, obj: obj[key] });
            }
        }
    }
    return result;
};

module.exports = ODMObject;
