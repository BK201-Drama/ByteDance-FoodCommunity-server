const BSON = require('bson');
const { dlog } = require('./helpers/utils');

const defaultRequestConfig = {
    headers: { 'content-type': 'application/bson' },
    responseType: 'arraybuffer',
    maxRedirects: 0,
    maxBodyLength: 16 * 1024 * 1024,
    maxContentLength: -1,
};

async function request(serviceId, instruction, axiosInstance) {
    if (!instruction.serviceId) {
        instruction.serviceId = serviceId;
    }

    dlog('db instruction:', instruction);

    try {
        const buf = BSON.serialize(instruction, { serializeFunctions: true });

        dlog('request body length:', buf.length);

        const resp = await axiosInstance.post('/v1/lightDb/op', buf, defaultRequestConfig);

        dlog('response body length:', resp.data.length);

        const result = BSON.deserialize(resp.data, { promoteBuffers: true }).result;

        dlog('result:', result);
        return result;
    } catch (err) {
        if (err.response) {
            const { headers = {} } = err.response;
            const contentType = headers['content-type'] || '';
            if (contentType.startsWith('application/bson')) {
                const responseBody = BSON.deserialize(err.response.data, { promoteBuffers: true });
                throw new Error(responseBody.message);
            }
            throw new Error(err.response.data.toString());
        }

        throw err;
    }
}

module.exports = { request };
