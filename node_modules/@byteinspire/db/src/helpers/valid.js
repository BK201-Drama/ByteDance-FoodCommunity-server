const check = require('check-types');
const { superstruct, isStruct } = require('superstruct');
let types = {
    n: (v) => v == null,
    num: check.number, // finite number
    int: check.integer,
    bool: check.boolean,
    numStr: (v) => typeof v === 'string' && !isNaN(v) && isFinite(v),
    intStr: isIntegerStr,
    boolStr: (v) => typeof v === 'string' && (v === 'true' || v === 'false'),
    str: check.string,
    'str!': (v) => check.nonEmptyString(v) && check.nonEmptyString(v.trim()), // non whitespace string
    pos: check.positive,
    neg: check.negative,
    arr: check.array,
    'arr!': check.nonEmptyArray,
    obj: check.object,
    'obj!': check.nonEmptyObject,
};

// https://stackoverflow.com/questions/10834796/validate-that-a-string-is-a-positive-integer
function isIntegerStr(str) {
    var n = Math.floor(Number(str));
    return n !== Infinity && String(n) === str;
}

function valid(schema, toCheck) {
    let schemaStruct;
    if (isStruct(schema)) {
        schemaStruct = schema;
    }
    if (check.object(schema)) {
        schemaStruct = valid.struct.partial(schema);
    } else {
        schemaStruct = valid.struct(schema);
    }

    return schemaStruct(toCheck);
}

valid.struct = superstruct({
    types,
});

valid.define = function (rules = {}) {
    let doUpdate = false;
    for (let [k, v] of Object.entries(rules)) {
        if (typeof v === 'function') {
        } else {
            throw new Error('type of value must be function');
        }
        if (!types[k]) {
            doUpdate = true;
            types[k] = v;
        }
    }
    if (doUpdate) {
        valid.struct = superstruct({
            types,
        });
    }
};
module.exports = valid;
