export interface IContext {
	headers: Record<string, string>;
	request?: IContext;
}
export declare type nullable = string | null;
export interface CurrentResponse {
	_id: string;
	username: string;
	nickname?: string;
	openid?: string;
	anonymousOpenid?: string;
	unionid?: string;
	platform?: string;
	avatar: nullable;
	passhash?: nullable;
	secret?: nullable;
	email: nullable;
	phoneNumber: nullable;
	intro: nullable;
	lastIp: nullable;
	lastLogin: number | null;
	loginCount: number;
	agent: nullable;
	status: boolean;
	firstProvider: string;
	createAt: number;
	createdAt: number;
	updatedAt: number;
	[k: string]: any;
}
export interface RegisterResponse {
	isLogin: boolean;
	sessionKey: string;
	userInfo: CurrentResponse;
}
export interface SendSMSOptions {
	region?: string;
}
export interface SendSMSResponse {
	createdAt: number;
	account: string;
	messageId: string;
	success: boolean;
}
declare class User {
	private readonly serviceId;
	private readonly axios;
	constructor(serviceId: string, axiosInstance: any);
	private request;
	private bind;
	current: (ctx: IContext) => Promise<CurrentResponse>;
	logout: (ctx: IContext) => Promise<{
		success: boolean;
	}>;
	login: (ctx: IContext, account: string, password: string) => Promise<any>;
	loginByPhone: (ctx: IContext, account: string, code: string) => Promise<any>;
	register: (ctx: IContext, account: string, password: string) => Promise<RegisterResponse>;
	updateOne: (ctx: IContext, user: Partial<CurrentResponse>) => Promise<CurrentResponse>;
	sendSMS: (ctx: IContext, account: string, opt?: SendSMSOptions | undefined) => Promise<SendSMSResponse>;
	changePassword: (ctx: IContext, newPassword: string, originPassword?: string | undefined) => Promise<{
		success: boolean;
	}>;
}
export declare function createUserSDK(serviceId: string, axiosInstance: any): User;
export default User;

export {};
