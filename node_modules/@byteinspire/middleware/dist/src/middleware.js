"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const form_data_1 = __importDefault(require("form-data"));
class UserException {
    constructor(status, data) {
        this.status = status;
        this.data = data;
    }
}
class Middleware {
    constructor(serviceId, axiosInstance) {
        /** Proxy 监听到的原始对象 */
        this.target = {};
        this.versionMap = {};
        if (!serviceId) {
            throw new Error('Please input your serviceId.');
        }
        this.serviceId = serviceId;
        this.httpInstance = axiosInstance;
        try {
            this.versionMap = JSON.parse(process.env.INSPIRECLOUD_MIDDLEWARE_VERSIONS || '{}');
        }
        catch (err) {
            throw new Error('middleware sdk init failed, version map is not JSON format');
        }
        /** 使用 Proxy 实现任意属性 avaiable 的能力*/
        this.middleware = new Proxy(this.target, {
            get: (target, middleware) => {
                // 已经定义直接返回
                if (Object.prototype.hasOwnProperty.call(target, middleware)) {
                    return target[middleware];
                }
                // 原型链上的属性直接返回
                // if (target[middleware]) {
                //   return target[middleware]
                // }
                target[middleware] = new Proxy(Object.create(null), {
                    get: (obj, method) => {
                        // 已经定义直接返回
                        if (Object.prototype.hasOwnProperty.call(obj, method)) {
                            return obj[method];
                        }
                        // 原型链上的属性直接返回
                        // if (obj[method]) {
                        //   return obj[method]
                        // }
                        if (!Object.prototype.hasOwnProperty.call(this.versionMap, middleware)) {
                            throw new Error(`middleware ${middleware} has not installed`);
                        }
                        obj[method] = this.methodFactory(middleware, method, this.versionMap[middleware]);
                        return obj[method];
                    }
                });
                return target[middleware];
            }
        });
    }
    methodFactory(middleware, method, version) {
        return async (params) => {
            const reqPrarams = await this.generateReqParam(params);
            return await this.request(Object.assign({ url: `/v1/middleware/${this.serviceId}/${middleware}/${method}/${version}`, method: 'post' }, reqPrarams));
        };
    }
    async request(opts) {
        const requestOpts = Object.assign(opts, {
            headers: opts.headers || {},
            responseType: 'stream'
        });
        try {
            const response = await this.httpInstance.request(requestOpts);
            const contentType = response.headers['content-type'];
            if (contentType.startsWith('text/') || contentType.startsWith('application/xml') || contentType.startsWith('application/json')) {
                let result = '';
                await new Promise((resovle) => {
                    response.data.on('data', chunk => result += chunk);
                    response.data.on('end', resovle);
                });
                if (contentType.startsWith('application/json')) {
                    try {
                        return JSON.parse(result);
                    }
                    catch (err) {
                        return result;
                    }
                }
                return result;
            }
            // 非文本类返回 stream
            return response.data;
        }
        catch (e) {
            const { response = {} } = e;
            const { data = {}, headers } = response;
            // responseType 为 'stream' 需要我们自己解析数据
            let result = '';
            await new Promise((resovle) => {
                data.on('data', chunk => result += chunk);
                data.on('end', resovle);
            });
            if (headers && headers['content-type'] === 'application/json') {
                const end = JSON.parse(result);
                if (headers['x-light-middleware-error']) {
                    // 小中间件 gateway 返回的错误
                    throw new Error(end.message || end.error || 'service error, please contact on-call');
                }
                // 小中间件服务（用户代码）返回的错误，直接抛出该错误
                throw new UserException(response.status, end || 'middleware service error, please contact the author for help');
            }
            else {
                // 小中间件服务（用户代码）的错误，直接抛出该错误
                throw new UserException(response.status, result);
            }
        }
    }
    /**
     * 将用户参数转化为请求使用的参数（data 和 headers）
     * @param param
     */
    async generateReqParam(params) {
        if (typeof params === 'object' && params) {
            if (Object.values(params).some(item => item instanceof stream_1.Readable)) {
                // 如果传入流对象，则发送 mutilpart 请求
                const form = new form_data_1.default();
                Object.entries(params).forEach(([key, value]) => {
                    form.append(key, value);
                });
                const length = await new Promise((resolve) => {
                    form.getLength(function (err, length) {
                        if (err) {
                            throw err;
                        }
                        resolve(length);
                    });
                });
                return {
                    data: form,
                    headers: Object.assign(Object.assign({}, form.getHeaders()), { 'content-length': length })
                };
            }
        }
        return { data: params, headers: {} };
    }
    getMiddleware() {
        return this.middleware;
    }
}
exports.default = Middleware;
