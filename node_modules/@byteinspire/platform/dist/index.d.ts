declare class ObjectId {
  constructor(id?: string | number | ObjectId);
  generationTime: number;
  static cacheHexString?: boolean;
  static createFromHexString(hexString: string): ObjectId;
  static createFromTime(time: number): ObjectId;
  static isValid(id: string | number | ObjectId): boolean;
  equals(otherID: ObjectId | string): boolean;
  static generate(time?: number): Buffer;
  getTimestamp(): Date;
  toHexString(): string;
}
export interface IUser {
  _id: string | ObjectId;
}
declare abstract class User {
  abstract current(context: any): Promise<IUser>;
}
export interface CommonOptions {
  user: User;
}
declare class Common {
  constructor(opts: Common);
  constructor(
    serviceId: string,
    axiosInstance: any,
    options: CommonOptions
  );
}
export interface IGetAccessToken {
  accessToken: string;
  expiresIn: number;
  expiresAt: number;
  raw: string;
  message?: string;
}
export interface IGetSessionKey {
  sessionKey: string;
  expiresIn: number;
  expiresAt: number;
  raw: string;
  message?: string;
}
declare class WeixinMiniProgram extends Common {
  /**
   * 获取小程序全局唯一后台接口调用凭据 (access_token)
   *
   * https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html
   */
  getAccessToken: () => Promise<IGetAccessToken>;
  /**
   * 登录凭证校验
   *
   * https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html
   */
  getSessionKey: (context: any) => Promise<IGetSessionKey>;
}
declare class BytedanceMicroapp extends Common {
  /**
   * 小程序的全局唯一调用凭据 (access_token)
   *
   * https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/server/interface-request-credential/get-access-token
   */
  getAccessToken: () => Promise<IGetAccessToken>;
  /**
   * 登录凭证校验
   *
   * https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/server/log-in/code-2-session
   */
  getSessionKey: (context: any) => Promise<IGetSessionKey>;
}
declare class Feishu extends Common {
  /**
   * 小程序的全局唯一调用凭据 (app_access_token)
   */
  getAppAccessToken: () => Promise<IGetAccessToken>;
  /**
   * 小程序的全局唯一调用凭据 (tenant_access_token)
   */
  getTenantAccessToken: () => Promise<IGetAccessToken>;
  /**
   * 获取用户凭证
   * 转换名称 sessionKey -> accessToken
   */
  getUserAccessToken: (context: any) => Promise<IGetAccessToken>;
  /**
   * 登录凭证校验
   */
  getSessionKey: (context: any) => Promise<IGetSessionKey>;
}
declare class Platform {
  private _common;
  weixinMiniProgram: WeixinMiniProgram;
  bytedanceMicroapp: BytedanceMicroapp;
  feishu: Feishu;
  constructor(
    serviceId: string,
    axiosInstance: any,
    options: CommonOptions
  );
}
export declare function createPlatformSDK(
  serviceId: string,
  axiosInstance: any
): {
  serviceId: string;
  axiosInstance: any;
  Platform: typeof Platform;
};
export default Platform;

export {};
