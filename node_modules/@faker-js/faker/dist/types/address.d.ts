import type { Faker } from '.';
import type { Helpers } from './helpers';
export declare class Address {
    private readonly faker;
    readonly Helpers: Helpers;
    constructor(faker: Faker);
    /**
     * Generates random zipcode from format. If format is not specified, the
     * locale's zip format is used.
     *
     * @method faker.address.zipCode
     * @param format
     */
    zipCode(format?: string): string;
    /**
     * Generates random zipcode from state abbreviation. If state abbreviation is
     * not specified, a random zip code is generated according to the locale's zip format.
     * Only works for locales with postcode_by_state definition. If a locale does not
     * have a postcode_by_state definition, a random zip code is generated according
     * to the locale's zip format.
     *
     * @method faker.address.zipCodeByState
     * @param state
     */
    zipCodeByState(state: string): string | number;
    /**
     * Generates a random localized city name. The format string can contain any
     * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in
     * order to build the city name.
     *
     * If no format string is provided one of the following is randomly used:
     *
     * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`
     * * `{{address.cityPrefix}} {{name.firstName}}`
     * * `{{name.firstName}}{{address.citySuffix}}`
     * * `{{name.lastName}}{{address.citySuffix}}`
     * * `{{address.cityName}}` when city name is available
     *
     * @method faker.address.city
     * @param format
     */
    city(format?: string | number): string;
    /**
     * Return a random localized city prefix
     *
     * @method faker.address.cityPrefix
     */
    cityPrefix(): string;
    /**
     * Return a random localized city suffix
     *
     * @method faker.address.citySuffix
     */
    citySuffix(): string;
    /**
     * Returns a random city name
     *
     * @method faker.address.cityName
     */
    cityName(): string;
    /**
     * Returns a random localized street name
     *
     * @method faker.address.streetName
     */
    streetName(): string;
    /**
     * Returns a random localized street address
     *
     * @method faker.address.streetAddress
     * @param useFullAddress
     */
    streetAddress(useFullAddress?: boolean): string;
    /**
     * streetSuffix
     *
     * @method faker.address.streetSuffix
     */
    streetSuffix(): string;
    /**
     * streetPrefix
     *
     * @method faker.address.streetPrefix
     */
    streetPrefix(): string;
    /**
     * secondaryAddress
     *
     * @method faker.address.secondaryAddress
     */
    secondaryAddress(): string;
    /**
     * county
     *
     * @method faker.address.county
     */
    county(): string;
    /**
     * country
     *
     * @method faker.address.country
     */
    country(): string;
    /**
     * countryCode
     *
     * @method faker.address.countryCode
     * @param alphaCode default alpha-2
     */
    countryCode(alphaCode?: string): string;
    /**
     * state
     *
     * @method faker.address.state
     * @param useAbbr
     */
    state(useAbbr?: boolean): string;
    /**
     * stateAbbr
     *
     * @method faker.address.stateAbbr
     */
    stateAbbr(): string;
    /**
     * latitude
     *
     * @method faker.address.latitude
     * @param max default is 90
     * @param min default is -90
     * @param precision default is 4
     */
    latitude(max?: number, min?: number, precision?: number): string;
    /**
     * longitude
     *
     * @method faker.address.longitude
     * @param max default is 180
     * @param min default is -180
     * @param precision default is 4
     */
    longitude(max?: number, min?: number, precision?: number): string;
    /**
     *  direction
     *
     * @method faker.address.direction
     * @param useAbbr return direction abbreviation. defaults to false
     */
    direction(useAbbr?: boolean): string;
    /**
     * cardinal direction
     *
     * @method faker.address.cardinalDirection
     * @param useAbbr return direction abbreviation. defaults to false
     */
    cardinalDirection(useAbbr?: boolean): string;
    /**
     * ordinal direction
     *
     * @method faker.address.ordinalDirection
     * @param useAbbr return direction abbreviation. defaults to false
     */
    ordinalDirection(useAbbr?: boolean): string;
    nearbyGPSCoordinate(coordinate?: number[], radius?: number, isMetric?: boolean): string[];
    /**
     * Return a random time zone
     *
     * @method faker.address.timeZone
     */
    timeZone(): string;
}
