import type { Faker } from '.';
export declare class Random {
    private readonly faker;
    constructor(faker: Faker, seed?: any[] | any);
    /**
     * Returns a single random number based on a max number or range.
     *
     * @method faker.random.number
     * @param options {min, max, precision}
     *
     * @deprecated
     */
    number(options?: number | {
        min?: number;
        max?: number;
        precision?: number;
    }): number;
    /**
     * Returns a single random floating-point number based on a max number or range.
     *
     * @method faker.random.float
     * @param options
     *
     * @deprecated
     */
    float(options?: number | {
        min?: number;
        max?: number;
        precision?: number;
    }): number;
    /**
     * Takes an array and returns a random element of the array.
     *
     * @method faker.random.arrayElement
     * @param array
     */
    arrayElement<T = string>(array?: ReadonlyArray<T>): T;
    /**
     * Takes an array and returns a subset with random elements of the array.
     *
     * @method faker.random.arrayElements
     * @param array
     * @param count number of elements to pick
     */
    arrayElements<T>(array?: ReadonlyArray<T>, count?: number): T[];
    /**
     * Takes an object and returns a random key or value.
     *
     * @method faker.random.objectElement
     * @param object
     * @param field
     */
    objectElement<T extends Record<string, unknown>, K extends keyof T>(object: T, field: 'key'): K;
    objectElement<T extends Record<string, unknown>, K extends keyof T>(object: T, field?: unknown): T[K];
    /**
     * uuid
     *
     * @method faker.random.uuid
     * @deprecated
     */
    uuid(): string;
    /**
     * boolean
     *
     * @method faker.random.boolean
     * @deprecated
     */
    boolean(): boolean;
    /**
     * word
     *
     * @method faker.random.word
     * @param type
     */
    word(type?: unknown): string;
    readonly randomWord: Random['word'];
    /**
     * randomWords
     *
     * @method faker.random.words
     * @param count defaults to a random value between 1 and 3
     */
    words(count?: number): string;
    readonly randomWords: Random['words'];
    /**
     * locale
     *
     * @method faker.random.image
     * @deprecated
     */
    image(): string;
    readonly randomImage: Random['image'];
    /**
     * locale
     *
     * @method faker.random.locale
     */
    locale(): string;
    readonly randomLocale: Random['locale'];
    /**
     * alpha. returns lower/upper alpha characters based count and upcase options
     *
     * @method faker.random.alpha
     * @param options // defaults to { count: 1, upcase: false, bannedChars: [] }
     */
    alpha(options?: number | {
        count: number;
        upcase?: boolean;
        bannedChars?: string[];
    }): string;
    /**
     * alphaNumeric
     *
     * @method faker.random.alphaNumeric
     * @param count defaults to 1
     * @param options // defaults to { bannedChars: [] }
     * @param options.bannedChars array of characters which should be banned in new string
     */
    alphaNumeric(count?: number, options?: {
        bannedChars?: string[];
    }): string;
    /**
     * hexaDecimal
     *
     * @method faker.random.hexaDecimal
     * @param count defaults to 1
     * @deprecated
     */
    hexaDecimal(count?: number): string;
}
